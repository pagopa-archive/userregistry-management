# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none
pr: none

resources:
  - repo: self

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    values:
      - dev
      - uat
      - prod
  - name: version
    displayName: docker image version form https://github.com/pagopa/pdnd-interop-uservice-user-registry-management/pkgs/container/pdnd-interop-uservice-user-registry-management
    type: string

variables:
  dockerfileRelativePath: '$(DOCKERFILE)' # Dockerfile

  # Agent VM image name for Build

  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: '$(IMAGE_REPOSITORY_NAME)'

  ${{ if eq(parameters['environment'], 'dev') }}:
    environment: 'DEV'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    AZURE_SUBSCRIPTION: '$(DEV_AZURE_SUBSCRIPTION)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(DEV_AGENT_POOL)
    DEPLOY_TYPE: $[variables['DEV_DEPLOY_TYPE']]
    WEB_APP_NAME: $(DEV_WEB_APP_NAME)
    WEB_APP_RESOURCE_GROUP_NAME: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)

  ${{ if eq(parameters['environment'], 'uat') }}:
    environment: 'UAT'
    dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
    AZURE_SUBSCRIPTION: '$(UAT_AZURE_SUBSCRIPTION)'
    containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(UAT_AGENT_POOL)
    DEPLOY_TYPE: $[variables['UAT_DEPLOY_TYPE']]
    WEB_APP_NAME: $(UAT_WEB_APP_NAME)
    WEB_APP_RESOURCE_GROUP_NAME: $(UAT_WEB_APP_RESOURCE_GROUP_NAME)

  ${{ if eq(parameters['environment'], 'prod') }}:
    environment: 'PROD'
    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
    AZURE_SUBSCRIPTION: '$(PROD_AZURE_SUBSCRIPTION)'
    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(PROD_AGENT_POOL)
    DEPLOY_TYPE: $[variables['PROD_DEPLOY_TYPE']]
    WEB_APP_NAME: $(PROD_WEB_APP_NAME)
    WEB_APP_RESOURCE_GROUP_NAME: $(PROD_WEB_APP_RESOURCE_GROUP_NAME)

stages:
  - stage: 'Build'
    displayName: 'Build_and_Pusblih_to_${{ variables.environment }}'
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            displayName: 'Build_image'
            condition: succeeded()
            inputs:
              containerRegistry: '$(COMMON_CONTAINER_REGISTRY_SERVICE_CONN)'
              repository: '$(imageRepository)'
              command: 'Build'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              arguments: --build-arg APP_IMAGE=$(DOCKER_BASE_IMAGE_NAME):${{ parameters.version }}
              tags: |
                $(Build.BuildId)
                latest
                ${{ parameters.version }}
          - script: |
              docker tag '$(COMMON_CONTAINER_REGISTRY_NAME)/$(imageRepository):latest' '$(containerRegistry)/$(imageRepository):latest'
              docker tag '$(COMMON_CONTAINER_REGISTRY_NAME)/$(imageRepository):$(Build.BuildId)' '$(containerRegistry)/$(imageRepository):$(Build.BuildId)'
              docker tag '$(COMMON_CONTAINER_REGISTRY_NAME)/$(imageRepository):${{ parameters.version }}' '$(containerRegistry)/$(imageRepository):${{ parameters.version }}'
            displayName: 'Tag_image'
          - task: Docker@2
            displayName: 'Publish_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'push'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                latest
                ${{ parameters.version }}

  - stage: 'Deploy'
    displayName: 'Deploy_to_${{ variables.environment }}'
    dependsOn: ['Build']
    condition: succeeded()
    jobs:
      - deployment: 'Deploy_to_${{ variables.environment }}'
        condition: eq(variables.DEPLOY_TYPE, 'staging_slot_and_swap')
        displayName: 'Deploy_to_${{ variables.environment }}_staging_slot_and_swap'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none

                # Deploy to staging slot
                - task: AzureWebAppContainer@1
                  inputs:
                    azureSubscription: '$(AZURE_SUBSCRIPTION)'
                    resourceGroupName: '$(WEB_APP_RESOURCE_GROUP_NAME)'
                    appType: 'webApp'
                    appName: '$(WEB_APP_NAME)'
                    imageName: '$(containerRegistry)/$(imageRepository):${{ parameters.version }}'
                    deploymentMethod: 'auto'
                    deployToSlotOrASE: true
                    slotName: 'staging'
                  displayName: 'Deploy to staging slot'

                # Check that the staging instance is healthy
                - script: |
                    # fails if response status is not 2xx
                    curl -f 'https://${{ app.Value.appname }}-staging.azurewebsites.net/$(HEALTHCHECK_PATH)'
                  displayName: 'Healthcheck'

                # Swap with production slot
                - task: AzureAppServiceManage@0
                  inputs:
                    azureSubscription: '$(AZURE_SUBSCRIPTION)'
                    resourceGroupName: '$(WEB_APP_RESOURCE_GROUP_NAME)'
                    webAppName: '$(WEB_APP_NAME)'
                    sourceSlot: 'staging'
                    swapWithProduction: true
                  displayName: 'Swap with production slot'

      - deployment: 'Deploy_to_${{ variables.environment }}'
        condition: eq(variables.DEPLOY_TYPE, 'production_slot')
        displayName: 'Deploy_to_${{ variables.environment }}_production_slot'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none

                # Deploy to production slot
                - task: AzureWebAppContainer@1
                  inputs:
                    azureSubscription: '$(AZURE_SUBSCRIPTION)'
                    resourceGroupName: '$(WEB_APP_RESOURCE_GROUP_NAME)'
                    webAppName: '$(WEB_APP_NAME)'
                    imageName: '$(containerRegistry)/$(imageRepository):${{ parameters.version }}'
                    appType: 'webApp'
                    slotName: 'production'
                    deployToSlotOrASE: true
                    deploymentMethod: 'auto'
                  displayName: 'Deploy to production slot'
